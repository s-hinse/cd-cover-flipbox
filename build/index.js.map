{"version":3,"file":"index.js","mappings":"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","sources":["webpack://cd-cover-flipbox/external window [\"wp\",\"blockEditor\"]","webpack://cd-cover-flipbox/external window [\"wp\",\"blocks\"]","webpack://cd-cover-flipbox/external window [\"wp\",\"components\"]","webpack://cd-cover-flipbox/external window [\"wp\",\"element\"]","webpack://cd-cover-flipbox/external window [\"wp\",\"i18n\"]","webpack://cd-cover-flipbox/webpack/bootstrap","webpack://cd-cover-flipbox/webpack/runtime/compat get default export","webpack://cd-cover-flipbox/webpack/runtime/define property getters","webpack://cd-cover-flipbox/webpack/runtime/hasOwnProperty shorthand","webpack://cd-cover-flipbox/webpack/runtime/make namespace object","webpack://cd-cover-flipbox/./src/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * WordPress dependencies\r\n */\r\nimport { __ } from '@wordpress/i18n';\r\nimport { registerBlockType } from '@wordpress/blocks';\r\nimport { \r\n    useBlockProps, \r\n    InspectorControls, \r\n    MediaUpload, \r\n    MediaUploadCheck,\r\n    RichText,\r\n    BlockControls,\r\n    AlignmentToolbar,\r\n    RichTextToolbarButton\r\n} from '@wordpress/block-editor';\r\nimport {\r\n    PanelBody,\r\n    Button,\r\n    RangeControl,\r\n    ColorPicker,\r\n    ToolbarGroup,\r\n    ToolbarButton,\r\n    SelectControl,\r\n    ToggleControl\r\n} from '@wordpress/components';\r\nimport { format as formatIcon, formatBold, color as colorIcon } from '@wordpress/icons';\r\n\r\n/**\r\n * Internal dependencies\r\n */\r\nimport metadata from './block.json';\r\n\r\n/**\r\n * Register the block\r\n */\r\nregisterBlockType(metadata.name, {\r\n    ...metadata,\r\n\r\n    /**\r\n     * Edit function for the block\r\n     */\r\n    edit: ({ attributes, setAttributes }) => {\r\n        const { \r\n            imageUrl, \r\n            imageId, \r\n            imageAlt, \r\n            infoText, \r\n            boxSize,\r\n            boxSizeUnit,\r\n            backgroundColor,\r\n            textColor,\r\n            animationType,\r\n            showShadow\r\n        } = attributes;\r\n\r\n        const blockProps = useBlockProps({\r\n            className: 'cd-cover-flipbox',\r\n        });\r\n\r\n        // Function to handle image selection\r\n        const onSelectImage = (media) => {\r\n            setAttributes({\r\n                imageUrl: media.url,\r\n                imageId: media.id,\r\n                imageAlt: media.alt || '',\r\n            });\r\n        };\r\n\r\n        // Function to remove image\r\n        const removeImage = () => {\r\n            setAttributes({\r\n                imageUrl: '',\r\n                imageId: undefined,\r\n                imageAlt: '',\r\n            });\r\n        };\r\n\r\n        return (\r\n            <div {...blockProps}>\r\n                <BlockControls>\r\n                    {/* The formatting options will be automatically provided by the RichText component \r\n                        based on the allowedFormats property */}\r\n                </BlockControls>\r\n\r\n                <InspectorControls>\r\n                    <PanelBody title={__('Flipbox Settings', 'cd-cover-flipbox')} initialOpen={true}>\r\n                        <div className=\"cd-cover-flipbox-size-controls\" style={{ display: 'flex', alignItems: 'flex-end' }}>\r\n                            <div style={{ flex: '1' }}>\r\n                                <RangeControl\r\n                                    label={__(`Box Size (${boxSizeUnit})`, 'cd-cover-flipbox')}\r\n                                    value={boxSize}\r\n                                    onChange={(value) => setAttributes({ boxSize: value })}\r\n                                    min={boxSizeUnit === 'px' ? 100 : 10}\r\n                                    max={boxSizeUnit === 'px' ? 600 : 100}\r\n                                    step={boxSizeUnit === 'px' ? 10 : 5}\r\n                                />\r\n                            </div>\r\n                            <div style={{ width: '80px', marginLeft: '8px' }}>\r\n                                <SelectControl\r\n                                    label={__('Unit', 'cd-cover-flipbox')}\r\n                                    value={boxSizeUnit}\r\n                                    options={[\r\n                                        { label: 'px', value: 'px' },\r\n                                        { label: '%', value: '%' },\r\n                                    ]}\r\n                                    onChange={(value) => setAttributes({ boxSizeUnit: value })}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"components-base-control\">\r\n                            <label className=\"components-base-control__label\">\r\n                                {__('Image', 'cd-cover-flipbox')}\r\n                            </label>\r\n                            <div className=\"cd-cover-flipbox-media-controls\">\r\n                                {!imageUrl ? (\r\n                                    <MediaUploadCheck>\r\n                                        <MediaUpload\r\n                                            onSelect={onSelectImage}\r\n                                            allowedTypes={['image']}\r\n                                            value={imageId}\r\n                                            render={({ open }) => (\r\n                                                <Button \r\n                                                    onClick={open}\r\n                                                    className=\"cd-cover-flipbox-select-button\"\r\n                                                    isSecondary\r\n                                                >\r\n                                                    {__('Select Image', 'cd-cover-flipbox')}\r\n                                                </Button>\r\n                                            )}\r\n                                        />\r\n                                    </MediaUploadCheck>\r\n                                ) : (\r\n                                    <div className=\"cd-cover-flipbox-image-preview\">\r\n                                        <img \r\n                                            src={imageUrl} \r\n                                            alt={imageAlt}\r\n                                            className=\"cd-cover-flipbox-thumbnail\"\r\n                                        />\r\n                                        <MediaUploadCheck>\r\n                                            <Button \r\n                                                onClick={removeImage}\r\n                                                className=\"cd-cover-flipbox-remove-button-sidebar\"\r\n                                                isLink\r\n                                                isDestructive\r\n                                            >\r\n                                                {__('Remove Image', 'cd-cover-flipbox')}\r\n                                            </Button>\r\n                                        </MediaUploadCheck>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"components-base-control\">\r\n                            <label className=\"components-base-control__label\">\r\n                                {__('Background Color (Back Side)', 'cd-cover-flipbox')}\r\n                            </label>\r\n                            <ColorPicker\r\n                                color={backgroundColor}\r\n                                onChangeComplete={(value) => setAttributes({ backgroundColor: value.hex })}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"components-base-control\">\r\n                            <label className=\"components-base-control__label\">\r\n                                {__('Text Color (Back Side)', 'cd-cover-flipbox')}\r\n                            </label>\r\n                            <ColorPicker\r\n                                color={textColor}\r\n                                onChangeComplete={(value) => setAttributes({ textColor: value.hex })}\r\n                                disableAlpha\r\n                            />\r\n                        </div>\r\n\r\n                        <SelectControl\r\n                            label={__('Animation Type', 'cd-cover-flipbox')}\r\n                            value={animationType}\r\n                            options={[\r\n                                { label: __('Horizontal Flip', 'cd-cover-flipbox'), value: 'flip-horizontal' },\r\n                                { label: __('Fade', 'cd-cover-flipbox'), value: 'fade' },\r\n                                { label: __('Grow from Middle', 'cd-cover-flipbox'), value: 'grow-middle' },\r\n                                { label: __('Flip from Top', 'cd-cover-flipbox'), value: 'flip-top' },\r\n                            ]}\r\n                            onChange={(value) => setAttributes({ animationType: value })}\r\n                        />\r\n\r\n                        <ToggleControl\r\n                            label={__('Show Shadow', 'cd-cover-flipbox')}\r\n                            checked={showShadow}\r\n                            onChange={(value) => setAttributes({ showShadow: value })}\r\n                            help={showShadow ? __('Shadow is enabled.', 'cd-cover-flipbox') : __('Shadow is disabled.', 'cd-cover-flipbox')}\r\n                        />\r\n                    </PanelBody>\r\n                </InspectorControls>\r\n\r\n                <div \r\n                    className={`cd-cover-flipbox-container cd-cover-flipbox-${animationType}`}\r\n                    style={{\r\n                        width: `${boxSize}${boxSizeUnit}`,\r\n                        height: `${boxSize}${boxSizeUnit}`,\r\n                    }}\r\n                >\r\n                    <div className=\"cd-cover-flipbox-inner\">\r\n                        <div \r\n                            className=\"cd-cover-flipbox-front\"\r\n                            style={{\r\n                                boxShadow: showShadow ? '0 4px 8px rgba(0, 0, 0, 0.2)' : 'none',\r\n                            }}\r\n                        >\r\n                            {!imageUrl ? (\r\n                                <div className=\"cd-cover-flipbox-placeholder\">\r\n                                    <p>{__('Select an image from the sidebar', 'cd-cover-flipbox')}</p>\r\n                                </div>\r\n                            ) : (\r\n                                <img \r\n                                    src={imageUrl} \r\n                                    alt={imageAlt}\r\n                                    className=\"cd-cover-flipbox-image\"\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <div \r\n                            className=\"cd-cover-flipbox-back\"\r\n                            style={{\r\n                                backgroundColor: backgroundColor,\r\n                                color: textColor,\r\n                                boxShadow: showShadow ? '0 4px 8px rgba(0, 0, 0, 0.2)' : 'none',\r\n                            }}\r\n                        >\r\n                            <div className=\"cd-cover-flipbox-back-content\">\r\n                                <RichText\r\n                                    tagName=\"div\"\r\n                                    value={infoText}\r\n                                    onChange={(value) => setAttributes({ infoText: value })}\r\n                                    placeholder={__('Enter info text here...', 'cd-cover-flipbox')}\r\n                                    allowedFormats={['core/bold', 'core/italic', 'core/text-color']}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Save function for the block\r\n     */\r\n    save: ({ attributes }) => {\r\n        const { \r\n            imageUrl, \r\n            imageAlt, \r\n            infoText, \r\n            boxSize,\r\n            boxSizeUnit,\r\n            backgroundColor,\r\n            textColor,\r\n            animationType,\r\n            showShadow\r\n        } = attributes;\r\n\r\n        const blockProps = useBlockProps.save({\r\n            className: 'cd-cover-flipbox',\r\n        });\r\n\r\n        return (\r\n            <div {...blockProps}>\r\n                <div \r\n                    className={`cd-cover-flipbox-container cd-cover-flipbox-${animationType}`}\r\n                    style={{\r\n                        width: `${boxSize}${boxSizeUnit}`,\r\n                        height: `${boxSize}${boxSizeUnit}`,\r\n                    }}\r\n                >\r\n                    <div className=\"cd-cover-flipbox-inner\">\r\n                        <div \r\n                            className=\"cd-cover-flipbox-front\"\r\n                            style={{\r\n                                boxShadow: showShadow ? '0 4px 8px rgba(0, 0, 0, 0.2)' : 'none',\r\n                            }}\r\n                        >\r\n                            {imageUrl && (\r\n                                <img \r\n                                    src={imageUrl} \r\n                                    alt={imageAlt}\r\n                                    className=\"cd-cover-flipbox-image\"\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <div \r\n                            className=\"cd-cover-flipbox-back\"\r\n                            style={{\r\n                                backgroundColor: backgroundColor,\r\n                                color: textColor,\r\n                                boxShadow: showShadow ? '0 4px 8px rgba(0, 0, 0, 0.2)' : 'none',\r\n                            }}\r\n                        >\r\n                            <div className=\"cd-cover-flipbox-back-content\">\r\n                                <RichText.Content\r\n                                    tagName=\"div\"\r\n                                    value={infoText}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    },\r\n});\r\n"],"names":["__","registerBlockType","useBlockProps","InspectorControls","MediaUpload","MediaUploadCheck","RichText","BlockControls","AlignmentToolbar","RichTextToolbarButton","PanelBody","Button","RangeControl","ColorPicker","ToolbarGroup","ToolbarButton","SelectControl","ToggleControl","format","formatIcon","formatBold","color","colorIcon","metadata","name","edit","attributes","setAttributes","imageUrl","imageId","imageAlt","infoText","boxSize","boxSizeUnit","backgroundColor","textColor","animationType","showShadow","blockProps","className","onSelectImage","media","url","id","alt","removeImage","undefined","createElement","title","initialOpen","style","display","alignItems","flex","label","value","onChange","min","max","step","width","marginLeft","options","onSelect","allowedTypes","render","open","onClick","isSecondary","src","isLink","isDestructive","onChangeComplete","hex","disableAlpha","checked","help","height","boxShadow","tagName","placeholder","allowedFormats","save","Content"],"sourceRoot":""}